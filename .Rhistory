attach(xdf)
x1 <- c( 0, 1,NA,NA, 1, 1, 0, 0,NA, 45)
x1
detach()
x1
View(xdf)
search()
rm(x1)
attach(xdf)
x1
x1 <- c( 0, 1,NA,NA, 1, 1, 0, 0,NA, 45)
ls(envir = .GlobalEnv)
ls()
ls(envir = xdf)
search()
ls(envir = as.environment(2))
x1()
x1
xdf
x2
get(x1, envir = as.environment(2))
get('x1', envir = as.environment(2))
get('x1', envir = as.environment(1))
x1
xdf$x1
search()
detach
detach()
ls()
search()
rm(x1, x12)
ls
ls()
xd
xdf
x1 <- c( 0, 1,NA,NA, 1, 1, 0, 0,NA, 0)
x2 <- c( 0,NA,NA,NA, 1, 0, 1, 0, 0, 0)
x3 <- c( 0, 1,NA,NA,NA, 0, 0, 0,NA, 0)
x4 <- c( 1, 1,NA,NA, 0, 1, 0, 0, 1, 1)
x5 <- c( 0, 1,NA,NA, 0, 1, 1, 0,NA, 1)
xdf <- data.frame(x1,x2,x3,x4,x5)
xdf
with(xdf, table(x1))
with(xdf,
table(x1),
sum(x1),
mean(x1))
with(xdf, {
table(x1),
sum(x1),
mean(x1)})
with(xdf, {
table(x1)
sum(x1)
mean(x1)})
with(xdf, {
t <- table(x1)
s <- sum(x1)
m <- mean(x1)})
View(xdf)
t
with(xdf, {
t1 <- table(x1)
s1 <- sum(x1)
m1 <- mean(x1)})
t1
s1
m1
search()
with(xdf, {
t1 <- table(x1)
s1 <- sum(x1)
m1 <- mean(x1)
search()})
within(xdf, {
t1 <- table(x1)
s1 <- sum(x1)
m1 <- mean(x1)
search()})
table(xdf$x1)
sum(x1)
mean(x1)
xdf$t1 <- xfd$s1 <- xdf$m1 <- NULL
xdf$t1 <- xdf$s1 <- xdf$m1 <- NULL
View(xdf)
with(xdf, table(x1))
with(xdf, table(x1))
with(xdf, sum(x1, na.rm=TRUE))
with(xdf, mean(x1, na.rm=TRUE))
with(xdf, {
table(x1)
sum(x1, na.rm=TRUE)
mean(x1, na.rm=TRUE)
})
with(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
})
within(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
})
with(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
b <- 5
})
View(xdf)
within(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
b <- 5
})
View(xdf)
View(xdf)
with(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
b <- 5
print(xdf)
})
within(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
b <- 5
print(xdf)
})
fahrenheit_to_celcius <- function(f) (f - 32) / 1.8
airquality <- with(airquality, list(
fahrenheit_to_celcius(Temp),
log(Ozone),
month.abb[Month]
))
airquality <- within(airquality,
{
cTemp2     <- fahrenheit_to_celcius(Temp)
logOzone2  <- log(Ozone)
MonthName2 <- month.abb[Month]
})
rm(airquality)
airquality <- within(airquality,
{
cTemp2     <- fahrenheit_to_celcius(Temp)
logOzone2  <- log(Ozone)
MonthName2 <- month.abb[Month]
})
View(airquality)
View(airquality)
airquality <- transform(airquality,
cTemp3     = fahrenheit_to_celcius(Temp),
logOzone3  = log(Ozone),
MonthName3 = month.abb[Month]
)
View(airquality)
head(state.x77)
colnames(state.x77)
states <- as.data.frame(state.x77[,1:5])
names(states)
q <- names(states)[4]
# you'll notice that the 4th variable "Life Exp"
# has a space in it - this can cause problems
# when using the variable names in formulas and such
# so let RENAME this variable and REMOVE the SPACE
names(states)[4] <- "LifeExp"
names(states)
library(leaps)
leaps <- regsubsets(Murder ~ ., data=states, nbest=4)
plot(leaps, scale="adjr2")
library(car)
subsets(leaps, statistic="cp",
main="Cp Plot for All subsets regression")
abline(1,1,lty=2,col="red")
subsets(leaps, statistic="cp",
main="Cp Plot for All subsets regression")
abline(1,1,lty=2,col="red")
fit <- lm(mpg ~ hp + wt + hp:wt, data=mtcars)
summary(fit)
library(effects)
plot(effect(term="hp:wt",
mod=fit,
vcov.=vcov,
xlevels=list(wt=c(2.2, 3.2, 4.2))),
multiline=TRUE)
library(multcomp)
head(cholesterol)
str(cholesterol)
table(cholesterol$trt)
# let's create a copy of this dataset
# and call is df (dataframe)
df <- cholesterol
aggregate(df$response,
by=list(df$trt),
FUN=mean)
aggregate(df$response,
by=list(df$trt),
FUN=sd)
mystats <- function(x){
m <- mean(x)
n <- length(x)
s <- sd(x)
return(c(n=n, mean=m, stdev=s))
}
aggregate(df$response,
by=list(df$trt),
FUN=mystats)
library(multcomp)
head(cholesterol)
str(cholesterol)
table(cholesterol$trt)
df <- cholesterol
aggregate(df$response,
by=list(df$trt),
FUN=mean)
aggregate(df$response,
by=list(df$trt),
FUN=sd)
mystats <- function(x){
m <- mean(x)
n <- length(x)
s <- sd(x)
return(c(n=n, mean=m, stdev=s))
}
aggregate(df$response,
by=list(df$trt),
FUN=mystats)
fit <- aov(response ~ trt, df)
summary(fit)
fit
anova(fit)
coef(fit)
class(fit)
library(gplots)
plotmeans(response ~ trt, data=df,
xlab="Treatment Groups",
ylab="Response",
main="Means Plot with 95% CI's")
aa <- tolower(rownames(USArrests))
aa
aa2 <- rownames(USArrests)
aa2
crimes <- data.frame(state = tolower(rownames(USArrests)),
USArrests)
head(crimes)
data(maps)
data()
library(maps)
data()
data(package = "maps")
states_map <- map_data("state")
library("ggplot2", lib.loc="~/R/win-library/3.2")
states_map <- map_data("state")
data(package = "maps")
crime_map <- merge(states_map, crimes, by.x="region", by.y="state")
head(crime_map)
library(plyr)
crime_map2 <- arrange(crime_map, group, order)
# next load the mapproj package
# to use the coord_map() function - the last
# layer added in the ggplot commands below
# this will create a chloropleth map for the Assaults
library(mapproj)
ggplot(crime_map2, aes(x=long, y=lat, group=group, fill=Assault)) +
geom_polygon(colour="black") +
scale_fill_gradient2(low="#559999", mid="grey90", high="#BB650B",
midpoint=median(crimes$Assault)) +
expand_limits(x=states_map$long, y=states_map$lat) +
coord_map("polyconic")
# do another map for Murder
ggplot(crime_map2, aes(x=long, y=lat, group=group, fill=Murder)) +
geom_polygon(colour="black") +
scale_fill_gradient2(low="#559999", mid="grey90", high="#BB650B",
midpoint=median(crimes$Murder)) +
expand_limits(x=states_map$long, y=states_map$lat) +
coord_map("polyconic")
Sys.Date()
date()
today <- Sys.Date()
today
dob <- as.Date("1921-07-06") # Nancy Reagan's birthday
dob
difftime(today, dob, units="weeks")
as.numeric(difftime(today, dob, units="days")/365)
diff1 <- today - dob
diff1
diff1/365
library(lubridate)
as.duration(diff1)
year(today) - year(dob)
wday(dob)
wday(dob, label=TRUE)
class(today)
is.POSIXct(date())
is.POSIXlt(date())
as.POSIXct(date())
date()
class(Sys.time)
class(Sys.time())
class(Sys.Date())
class(date())
as.POSIXlt(Sys.time(), "GMT")
as.POSIXlt(Sys.time(), "EST")
now <- Sys.time()
now
class(now)
as.POSIXlt(now)
nowlt <- as.POSIXlt(now)
nowlt
class(nowlt)
now <- Sys.time()
class(now)
nowlt <- as.POSIXlt(now)
class(nowlt)
now
nowlt
str(now)
str(nowlt)
# define dob as a date object - let's use Nancy Reagan's birthday
dob <- as.Date("1921-07-06") # Nancy Reagan's birthday
dob
class(dob)
str(dob)
difftime(today, dob, units="weeks")
# convert to years dividing number of days by 365
# and create the output as.numeric
as.numeric(difftime(today, dob, units="days")/365)
# other date time math
diff1 <- today - dob # defaults to number of days elapsed
diff1
diff1/365
as.duration(diff1) # results shown in seconds and years
year(today) - year(dob) # results in years
wday(dob) # shows the 4th weekday = Wed
# Sunday is weekday 1 and Saturday is weekday 7
wday(dob, label=TRUE) # this shows the label for the 4th weekday
install.packages("stargazer")
library(stargazer, quietly = TRUE)
fit1 <- lm(mpg ~ wt, mtcars)
fit2 <- lm(mpg ~ wt + hp, mtcars)
fit3 <- lm(mpg ~ wt + hp + disp, mtcars)
stargazer(fit1, fit2, fit3, type = 'html')
mm <- mtcars
p <- ggplot(mtcars, aes(mpg, wt),
xlab="Weight of Car",
ylab=Miles Per Gallon) +
geom_point() +
geom_smooth(method = "loess", colour = "red", se = FALSE) +
geom_smooth(method = "lm", colour = "blue") +
facet_wrap(~cyl) +
ggtitle("Panels for # of Cylinders, RED smoothed line, BLUE linear fit line")
p
library(ggplot2)
p <- ggplot(mtcars, aes(mpg, wt),
xlab="Weight of Car",
ylab=Miles Per Gallon) +
geom_point() +
geom_smooth(method = "loess", colour = "red", se = FALSE) +
geom_smooth(method = "lm", colour = "blue") +
facet_wrap(~cyl) +
ggtitle("Panels for # of Cylinders, RED smoothed line, BLUE linear fit line")
p
p <- ggplot(mtcars, aes(mpg, wt),
xlab="Weight of Car",
ylab="Miles Per Gallon"") +
geom_point() +
geom_smooth(method = "loess", colour = "red", se = FALSE) +
geom_smooth(method = "lm", colour = "blue") +
facet_wrap(~cyl) +
ggtitle("Panels for # of Cylinders, RED smoothed line, BLUE linear fit line")
p
p <- ggplot(mtcars, aes(mpg, wt),
xlab="Weight of Car",
ylab="Miles Per Gallon") +
geom_point() +
geom_smooth(method = "loess", colour = "red", se = FALSE) +
geom_smooth(method = "lm", colour = "blue") +
facet_wrap(~cyl) +
ggtitle("Panels for # of Cylinders, RED smoothed line, BLUE linear fit line")
p
kable(summary(fit1))
fit1 <- lm(dist ~ speed, data=cars)
knitr::kable(summary(fit1))
fit1 <- lm(dist ~ speed, data=cars)
coef(fit1)
anova(fit1)
knitr::kable(coef(fit1))
knitr::kable(summary(fit1)$coef)
knitr::kable(anova(fit1))
fit1
summary(fit1)
abc <- summary(fit1)
class(fit1)
class(abc)
summary(fit1)$call
summary(fit1)$r.squared
summary(fit1)$adj.r.squared
format.AsIs(summary(fit1)$call)
paste0(summary(fit1)$call)
ab <- summary(fit1)$call
ab
class(ab)
as.list(ab)
as.list(summary(fit1)$call)$formula
as.list(summary(fit1)$call)$formula
paste0(as.list(summary(fit1)$call)$formula)
?rmarkdown::html_document
library("Deducer", lib.loc="~/R/win-library/3.2")
detach("package:JGR", unload=TRUE)
library("JGR", lib.loc="~/R/win-library/3.2")
JGR()
JGR()
library("Deducer", lib.loc="~/R/win-library/3.2")
library("Deducer", lib.loc="~/R/win-library/3.2")
deducer()
setwd("C:/MyGithub/web2")
getwd()
getwd()
•	At the end of this workshop, each participant will get experience using R + RStudio with the rmarkdown and knitr packages
•	At the end of this workshop, each participant will have created a report from raw data plus simple analysis plus documentation output in HTML, PDF (optional) and DOC formats
data(cars)
View(cars)
View(mtcars)
View(pressure)
getwd()
setwd("C:/MyGithub/web2/teaching/RWorkshopsFall2016")
getwd()
rmarkdown::render("rmarkdown01.Rmd",c("html_document","pdf_document"))
knitr::kable(summary(cars))
cancer.survival <- read.csv("cancer-survival.csv",
header = TRUE)
getwd()
setwd("C:/MyGithub/web2/teaching/RWorkshopsFall2016")
cancer.survival <- read.csv("cancer-survival.csv",
header = TRUE)
View(cancer.survival)
head(cancer.survival)
tail(cancer.survival)
library(knitr)
knitr::kable(head(cancer.survival))
str(cancer.survival)
names(cancer.survival)
class(cancer.survival$Survival)
class(cancer.survival[,2])
class(cancer.survival[,1])
class(cancer.survival$Survival)
class(cancer.survival[,1])
class(cancer.survival$Organ)
class(cancer.survival[,2])
cancer.survival[5,1]
??standard
?mean
help(mean)
?median
?minimum
??minimum
??minima
summary(cancer.survival[,1])
summary(cancer.survival$Organ)
summary(cancer.survival)
summary(cancer.survival)
sumout <- summary(cancer.survival)
class(sumout)
knitr::kable(sumout,
caption = "Table of Summary Statistics for 2 Variables in Dataset")
mean(cancer.survival$Survival)
mnsurv <- mean(cancer.survival$Survival)
mnsurv
sdsurv <- sd(cancer.survival$Survival)
sdsurv
round(mnsurv, digits=2)
round(sdsurv, digits=2)
hist(cancer.survival$Survival,
main="Histogram of Survival Times")
cancer.survival$Survival %>%
hist(main="Histogram of Survival Times")
library(dplyr)
cancer.survival %>%
summary()
cancer.survival$Survival %>%
hist(main="Histogram of Survival Times")
library(ggplot2)
ggplot(cancer.survival,
aes(x = Organ,
y=Survival,
color = Organ))
ggplot(cancer.survival,
aes(x = Organ,
y=Survival,
color = Organ)) +
geom_boxplot()
ggplot(cancer.survival,
aes(x = Organ,y=Survival, color = Organ)) +
geom_boxplot() +
stat_summary(fun.y=mean,
geom="point",
shape=23,
size=4)
#' and we can add a title
ggplot(cancer.survival,
aes(x = Organ,y=Survival, color = Organ)) +
geom_boxplot() +
stat_summary(fun.y=mean,
geom="point",
shape=23,
size=4) +
ggtitle("Survival time of patients affected by different cancers")
getwd()
