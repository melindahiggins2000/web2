# convert to graph
graph_net = graph.edgelist(graph_edges)
# extract layout (x-y coords)
graph_layout = layout.auto(graph_net)
# colors like default ggplot2
ggcolors <- function(n, alfa) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100, alpha = alfa)[1:n]
}
# colors of labels and points
txt_pal = ggcolors(num_categs)
pch_pal = paste(txt_pal, "55", sep='')
txt_col = txt_pal[unlcass(categories)]
pch_col = pch_pal[unclass(categories)]
txt_col = txt_pal[unclass(categories)]
pch_col = pch_pal[unclass(categories)]
txt_col
pch_col
# additional params
nobs = length(categories)
nedges = nrow(graph_edges)
# start plot
plot(graph_layout[,1], graph_layout[,2], type = "n", axes = FALSE,
xlab = "", ylab = "")
# draw tree branches
segments(
x0 = graph_layout[graph_edges[,1],1],
y0 = graph_layout[graph_edges[,1],2],
x1 = graph_layout[graph_edges[,2],1],
y1 = graph_layout[graph_edges[,2],2],
col = "#dcdcdc55", lwd = 3.5
)
# add tree leafs
points(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = pch_col,
pch = 19, cex = 2)
# add empty nodes
points(graph_layout[(nobs+1):nedges,1], graph_layout[(nobs+1):nedges,2],
col = "gray90", pch = 19, cex = 0.5)
# add node labels
text(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = txt_col,
phylo_tree$tip.label, cex = 1.5, xpd = TRUE, font = 1)
# start plot
plot(graph_layout[,1], graph_layout[,2], type = "n", axes = FALSE,
xlab = "", ylab = "")
# draw tree branches
segments(
x0 = graph_layout[graph_edges[,1],1],
y0 = graph_layout[graph_edges[,1],2],
x1 = graph_layout[graph_edges[,2],1],
y1 = graph_layout[graph_edges[,2],2],
col = "#dcdcdc55", lwd = 3.5
)
# add tree leafs
points(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = pch_col,
pch = 19, cex = 2)
# add empty nodes
points(graph_layout[(nobs+1):nedges,1], graph_layout[(nobs+1):nedges,2],
col = "gray90", pch = 19, cex = 0.5)
# add node labels
text(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = txt_col,
phylo_tree$tip.label, cex = 1, xpd = TRUE, font = 1)
unclass(categories)
plot(graph_layout[,1], graph_layout[,2], type = "n", axes = FALSE,
xlab = "", ylab = "")
# draw tree branches
segments(
x0 = graph_layout[graph_edges[,1],1],
y0 = graph_layout[graph_edges[,1],2],
x1 = graph_layout[graph_edges[,2],1],
y1 = graph_layout[graph_edges[,2],2],
col = "#dcdcdc55", lwd = 3.5
)
# add tree leafs
points(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = pch_col,
pch = 19, cex = 2)
# add empty nodes
points(graph_layout[(nobs+1):nedges,1], graph_layout[(nobs+1):nedges,2],
col = "gray90", pch = 19, cex = 0.5)
# add node labels
text(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = txt_col,
phylo_tree$tip.label, cex = 0.3, xpd = TRUE, font = txt_font)
txt_font = unclass(categories)
# start plot
plot(graph_layout[,1], graph_layout[,2], type = "n", axes = FALSE,
xlab = "", ylab = "")
# draw tree branches
segments(
x0 = graph_layout[graph_edges[,1],1],
y0 = graph_layout[graph_edges[,1],2],
x1 = graph_layout[graph_edges[,2],1],
y1 = graph_layout[graph_edges[,2],2],
col = "#dcdcdc55", lwd = 3.5
)
# add tree leafs
points(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = pch_col,
pch = 19, cex = 2)
# add empty nodes
points(graph_layout[(nobs+1):nedges,1], graph_layout[(nobs+1):nedges,2],
col = "gray90", pch = 19, cex = 0.5)
# add node labels
text(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = txt_col,
phylo_tree$tip.label, cex = 0.3, xpd = TRUE, font = txt_font)
plot(graph_layout[,1], graph_layout[,2], type = "n", axes = FALSE,
xlab = "", ylab = "")
# draw tree branches
segments(
x0 = graph_layout[graph_edges[,1],1],
y0 = graph_layout[graph_edges[,1],2],
x1 = graph_layout[graph_edges[,2],1],
y1 = graph_layout[graph_edges[,2],2],
col = "#dcdcdc55", lwd = 3.5
)
# add tree leafs
points(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = pch_col,
pch = 19, cex = 2)
# add empty nodes
points(graph_layout[(nobs+1):nedges,1], graph_layout[(nobs+1):nedges,2],
col = "gray90", pch = 19, cex = 0.5)
# add node labels
text(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = txt_col,
phylo_tree$tip.label, cex = 0.5, xpd = TRUE, font = txt_font)
df
rgb(
rbind(c(228, 26, 28),
c(77, 175, 74),
c(55, 126, 184)),
max = 255)
num_categs
sector_pal = rgb(
rbind(c(228, 26, 28),
c(77, 175, 74),
c(55, 126, 184)),
max = 255)
sector_pal[unclass(categories)]
sector_pal = rgb(
rbind(c(228, 26, 28),
c(77, 175, 74),
c(55, 126, 184)),
max = 255)
# colors of labels and points
txt_pal = sector_pal[unclass(categories)]
pch_pal = paste(txt_pal, "55", sep='')
txt_col = txt_pal
pch_col = pch_pal
txt_font = unclass(categories)
# additional params
nobs = length(categories)
nedges = nrow(graph_edges)
# start plot
plot(graph_layout[,1], graph_layout[,2], type = "n", axes = FALSE,
xlab = "", ylab = "")
# draw tree branches
segments(
x0 = graph_layout[graph_edges[,1],1],
y0 = graph_layout[graph_edges[,1],2],
x1 = graph_layout[graph_edges[,2],1],
y1 = graph_layout[graph_edges[,2],2],
col = "#dcdcdc55", lwd = 3.5
)
# add tree leafs
points(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = pch_col,
pch = 19, cex = 2)
# add empty nodes
points(graph_layout[(nobs+1):nedges,1], graph_layout[(nobs+1):nedges,2],
col = "gray90", pch = 19, cex = 0.5)
# add node labels
text(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = txt_col,
phylo_tree$tip.label, cex = 0.5, xpd = TRUE, font = txt_font)
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
rm(list = ls())
# read in the Prioritization Criteria data
Cri = read.csv("http://digitalcommons.lmu.edu/cgi/viewcontent.cgi?filename=1&article=1132&context=cate&type=additional")
# these labels are created to override the existing row names
organizations = c(
"The Friends of Wyman Park Dell",
"Mahan Rykiel",
"BWB",
"SouthEast CDC",
"Baltimore Office of Sustainability",
"Brooklyn and Curtis Bay Coalition, Inc.",
"Patterson Park Neighborhood Association",
"DOT",
"RK&K",
"Midtown Community Benefits District",
"Wyndhurst Neighborhood",
"Parks & People Foundation",
"DPW",
"Roland Park Civic League (Roland Park)",
"Roland Park Civic League (City)",
"Office of Public Health Preparedness & Response",
"BCRP - Capital Development",
"Bartlett Tree Experts",
"Baltimore Tree Trust",
"Department of General Services",
"Baltimore Medical System (E Baltimore)",
"Baltimore Medical System (City)",
"Department of Planning",
"Park Heights Renaissance",
"CPHA")
# add row names
rownames(Cri) = organizations
# build an hclust object using a distance matrix of euclidian distances
# and Ward's agglomeration method
dm <- hclust(dist(Cri[,-1], method = "euclidean"), method = "ward.D")
# vector of organization sectors
sectors = c("NGO", "Bus", "NGO", "NGO", "Gov",
"NGO", "NGO", "Gov", "Bus", "NGO",
"NGO", "NGO", "Gov", "NGO", "NGO",
"Gov", "Gov", "Bus", "NGO", "Gov",
"Gov", "Gov", "Gov", "NGO", "NGO")
# data frame of organizations and their sectors
df <- data.frame(
Org = organizations,
Sector = sectors)
dataset = Cri[,-1]
categories = df$Sector
dist_method = "euclidean"
clus_method = "ward.D"
# required packages
require(ape)     # for phylo trees
require(igraph)  # for graphs
# distance matrix
dist_data = dist(dataset, method = dist_method)
# hierarchical clustering
hcluster = hclust(dist_data, method = clus_method)
# cut dendrogram in given number of clusters
num_categs = nlevels(categories)
# convert to phylo object
phylo_tree = as.phylo(hcluster)
# get edges
graph_edges = phylo_tree$edge
# convert to graph
graph_net = graph.edgelist(graph_edges)
# extract layout (x-y coords)
graph_layout = layout.auto(graph_net)
# color palette
sector_pal = rgb(
rbind(c(228, 26, 28),
c(77, 175, 74),
c(55, 126, 184)),
max = 255)
# colors of labels and points
txt_pal = sector_pal[unclass(categories)]
pch_pal = paste(txt_pal, "55", sep='')
txt_col = txt_pal
pch_col = pch_pal
txt_font = unclass(categories)
# additional params
nobs = length(categories)
nedges = nrow(graph_edges)
# start plot
plot(graph_layout[,1], graph_layout[,2], type = "n", axes = FALSE,
xlab = "", ylab = "")
# draw tree branches
segments(
x0 = graph_layout[graph_edges[,1],1],
y0 = graph_layout[graph_edges[,1],2],
x1 = graph_layout[graph_edges[,2],1],
y1 = graph_layout[graph_edges[,2],2],
col = "#dcdcdc55", lwd = 3.5
)
# add tree leafs
points(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = pch_col,
pch = 19, cex = 2)
# add empty nodes
points(graph_layout[(nobs+1):nedges,1], graph_layout[(nobs+1):nedges,2],
col = "gray90", pch = 19, cex = 0.5)
# add node labels
text(graph_layout[1:nobs,1], graph_layout[1:nobs,2], col = txt_col,
phylo_tree$tip.label, cex = 0.8, xpd = TRUE, font = txt_font)
rm(list = ls())
# ========================================================
# Data
# ========================================================
# setting seed for random numbers
set.seed(1111)
# random normal distributions
den1 = density(rnorm(500))
den2 = density(rnorm(500, 1, 1.5))
den3 = density(rnorm(500, -1, 1.5))
# colors for each distribution
col1 = hsv(h = 0.65, s = 0.6, v = 0.8, alpha = 0.5)
col2 = hsv(h = 0.85, s = 0.6, v = 0.8, alpha = 0.5)
col3 = hsv(h = 0.55, s = 0.6, v = 0.8, alpha = 0.5)
plot.new()
# plot window
plot.window(xlim = c(-6,6), ylim = c(0,0.4))
# add axes
axis(side = 1, pos = 0, at = seq(from=-6, to=6, by=2), col = "gray20",
lwd.ticks = 0.25, cex.axis = 1, col.axis = "gray20", lwd = 1.5)
axis(side = 2, pos = -6, at = seq(from=0, to=0.4, by=0.1), col = "gray20",
las = 2, lwd.ticks = 0.5, cex.axis = 1, col.axis = "gray20", lwd = 1.5)
# density 1
polygon(den1$x, den1$y, col = col1, border = col1)
# density 2
polygon(den2$x, den2$y, col = col2, border = col2)
# density 3
polygon(den3$x, den3$y, col = col3, border = col3)
# add legends
text(1.3, 0.35, labels = "Normal(0, 1)", col = "gray30", cex = 0.9)
text(3.8, 0.15, labels = "Normal(1, 1.5)", col = "gray30", cex = 0.9)
text(-3.6, 0.15, labels = "Normal(-1, 1.5)", col = "gray30", cex = 0.9)
rm(list =ls())
\documentclass{beamer}
KnitGotplot <- function(input, base.url = "/work/gotplot/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("/Users/Gaston/Documents/gastonstat.github.io/work/gotplot")
KnitGotplot("Rmd/bar-chart.Rmd")
KnitGotplot <- function(input, base.url = "/work/gotplot/") {
require(knitr)
opts_knit$set(base.url = base.url)
#  fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
fig.path <- paste0("figs/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("/Users/Gaston/Documents/gastonstat.github.io/work/gotplot")
KnitGotplot("Rmd/bar-chart.Rmd")
KnitGotplot("Rmd/stacked-chart.Rmd")
KnitGotplot("gotplot_pie_chart.Rmd")
KnitGotplot("Rmd/gotplot_pie_chart.Rmd")
KnitGotplot("Rmd/gotplot_box_plot.Rmd")
KnitGotplot("Rmd/boxplots.Rmd")
# load data 'mtcars'
data(mtcars)
# setting seed for random numbers
set.seed(898)
# random sample to select 10 cars
rand_sample = sample(1:nrow(mtcars), size=10)
index = sort(mtcars[rand_sample, 1])
ord_index = order(mtcars[rand_sample, 1])
# colors for transmission (automatic, manual)
automatic = mtcars[rand_sample, "am"]
cols = rep("#BCBDDCAA", length(rand_sample))
cols[automatic == 0] = "#807DBA"
# set graphic margins
op = par(mar = c(4, 9, 1, 2))
# barplot
barplot(index, col = cols, border = NA, horiz = TRUE, xlim = c(0, 34),
names.arg = rownames(mtcars)[ord_index],
axes = FALSE, cex.names = 1, las = 2)
# add x axis
axis(side = 1, at = seq(0,34,4), line = -0.25, lwd = 0,
lwd.ticks = 0.5, cex.axis = 1)
mtext("miles per gallon", side = 1, line = 2, col = "gray10")
# add legend
legend(28, 3, legend = c("automatic", "manual"), pch = 22, bty = "n",
title = "transmission", pt.cex = 2, text.col = "gray40",
pt.bg = c("#BCBDDCAA", "#807DBA"), col = c("#BCBDDCAA", "#807DBA"))
# turn off par
par(op)
KnitGotplot("Rmd/bullet-chart.Rmd")
KnitGotplot("Rmd/density.Rmd")
KnitGotplot("Rmd/error-bars.Rmd")
KnitGotplot("Rmd/error-bars.Rmd")
KnitGotplot("Rmd/error-bars.Rmd")
KnitGotplot("Rmd/grouped-bar-chart.Rmd")
KnitGotplot("Rmd/guage.Rmd")
KnitGotplot("Rmd/heatmap-cars.Rmd")
KnitGotplot("Rmd/grouped-bar-chart.Rmd")
KnitGotplot("Rmd/heatmap-cars.Rmd")
KnitGotplot("Rmd/guage.Rmd")
KnitGotplot("Rmd/gauge.Rmd")
KnitGotplot("Rmd/bullet-chart.Rmd")
KnitGotplot("Rmd/density.Rmd")
KnitGotplot("Rmd/error-bars.Rmd")
KnitGotplot("Rmd/grouped-bar-chart.Rmd")
KnitGotplot("Rmd/gauge.Rmd")
KnitGotplot("Rmd/heatmap-cars.Rmd")
KnitGotplot("Rmd/heatmap-cars.Rmd")
KnitGotplot("Rmd/grouped-bar-chart.Rmd")
KnitGotplot("Rmd/heatmap-cars.Rmd")
KnitGotplot("Rmd/grouped-bar-chart.Rmd")
# load RColorBrewer
library(ggplot2)
library(reshape)
# load data 'mtcars'
data(mtcars)
# scale data by "columns"
carsdf = data.frame(scale(mtcars))
carsdf$model = rownames(mtcars)
cars_melt = melt(carsdf, id.vars = "model")
ggplot(data = cars_melt, aes(x = variable, y = model)) +
geom_tile(aes(fill = value), color = "white", size = 1) +
scale_fill_gradient(low = "gray95", high = "tomato") +
xlab("characteristics") +
theme_grey(base_size = 10) +
ggtitle("Heatmap (ggplot)") +
theme(axis.ticks = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size = 12, colour = "gray50"))
KnitGotplot("Rmd/histogram.Rmd")
KnitGotplot("Rmd/line-step-chart.Rmd")
KnitGotplot("Rmd/line-step-chart.Rmd")
KnitGotplot("Rmd/heatmap-ggplot.Rmd")
KnitGotplot("Rmd/lines-chart.Rmd")
ord = order(mtcars$mpg, decreasing=TRUE)
mcars = as.matrix(mtcars[ord,])
x = mcars
# matrix dimensions
di <- dim(x)
nr <- di[1L]
nc <- di[2L]
# row and column means
Rowv <- rowMeans(x)
Colv <- colMeans(x)
# row and col indices
rowInd <- 1L:nr
colInd <- 1L:nc
x <- x[rowInd, colInd]
# row and col names
labRow <- rownames(x)
labCol <- colnames(x)
# scale by "columns"
x <- sweep(x, 2L, colMeans(x), check.margin = FALSE)
sx <- apply(x, 2L, sd)
x <- sweep(x, 2L, sx, "/", check.margin = FALSE)
# layout matrix
lmat <- rbind(c(NA, 3), 2:1)
# widths
lwid <- c(0.05, 4)
# heights
lhei <- c(0.05, 4)
lmat[is.na(lmat)] <- 0
margins = c(5, 2)
# graphic device
#dev.hold()
#on.exit(dev.flush())
#op <- par(no.readonly = TRUE)
#on.exit(par(op), add = TRUE)
# set layout
layout(lmat, widths = lwid, heights = lhei, respect = TRUE)
par(mar = c(margins[1L], 2, 2, margins[2L]))
x <- t(x)
iy <- nr:1
x <- x[, iy]
# call image
image(1L:nc, 1L:nr, x, xlim = 0.5 + c(0, nc), ylim = 0.5 +
c(0, nr), axes = FALSE, xlab = "", ylab = "", col=brewer.pal(9,"YlGnBu"))
# add axes and labels
axis(1, 1L:nc, labels = labCol, las = 2, line = -0.5, tick = 0,
cex.axis = 0.2 + 1/log10(nc))
axis(2, iy, labels = labRow, las = 2, line = -0.5, tick = 0,
cex.axis = 0.2 + 1/log10(nr))
# add title
mtext(text="Heatmap", side=3, at=-0.3, line=0.5, cex=1.5, col="gray30", font=2)
# add grid
abline(h=1L:nr + 0.5, v=1L:nc + 0.5, col="white", lwd=1.7)
# par
par(mar = c(margins[1L], 0, 0, 0))
par(mar = c(0, 0, 0, margins[2L]))
KnitGotplot("Rmd/scatter-plot.Rmd")
KnitGotplot("Rmd/stacked-chart.Rmd")
df = read.csv("/Users/Gaston/Desktop/liga2013.csv")
head(df)
library(FactoMineR)
pca = PCA(df)
df = read.csv("/Users/Gaston/Desktop/liga2013.csv", row.names = 1)
head(df)
pca = PCA(df)
DF = read.csv("/Users/Gaston/Desktop/liga2013.csv", row.names = 1)
head(DF)
variables = c("shots", "goals", "red_cars", "yellow_cards")
teams = c(
"Barcelona",
"RealMadrid",
"Sevilla",
"Espanyol",
"Valencia")
df = DF[teams, variables]
pca = PCA(df)
DF = read.csv("/Users/Gaston/Desktop/liga2013.csv", row.names = 1)
head(DF)
pca = PCA(DF)
variables = c("shots", "goals", "lost_balls", "recovered_balls")
teams = c(
"Barcelona",
"RealMadrid",
"Sevilla",
"Espanyol",
"Valencia")
df = DF[teams, variables]
pca = PCA(df)
variables = c("shots", "goals_sored", "lost_balls", "recovered_balls")
teams = c(
"Barcelona",
"RealMadrid",
"Sevilla",
"Espanyol",
"Valencia")
df = DF[teams, variables]
pca = PCA(df)
variables = c("shots", "goals_scored", "lost_balls", "recovered_balls")
df = DF[teams, variables]
pca = PCA(df)
variables = c("shots", "passes", "lost_balls", "recovered_balls")
df = DF[teams, variables]
pca = PCA(df)
variables = c("shots", "passes", "lost_balls", "recovered_balls",
"yellow_cards")
df = DF[teams, variables]
pca = PCA(df)
